# WORK IN PROGRESS!!!
blueprint:
  name: 'Set Hue Scene on Trigger'
  description: 'Blueprint to set Hue Scene on triggers: Illuminance, LZW30-SN up/down presses, media playback changes, phase changes, and shifting mode changes.'
  domain: automation
  input:
    light_entity:
      description: The Hue light entity to be set.
      selector:
        entity:
          domain: light
    illuminance_entity:
      description: (Optional) Sensor entity which reports illuminance.
      default:
      selector:
        entity:
          domain: sensor
          device_class: illuminance
    illuminance_lux_threshold:
      description: (Optional) Lux value to trigger toggling between ON and OFF state. Required if illuminance_entity selected.
      default: 1000
      selector:
        number: 
          min: 0
          max: 30000
          mode: box
          step: 50
          unit_of_measurement: lux
    illuminance_toggle_on_high:
      description: (Optional) By default (off/false), set toggle-ON when _below_ illuminance_value (darker). When on/true, set toggle-ON when _above_ illuminance_value (brighter).
      default: false
      selector:
        boolean:
    illuminance_off_delay_seconds:
      description: (Optional) Seconds to delay before changing to toggle-OFF. Illuminance will be re-evaluated before setting toggle-OFF.
      default: 0
      selector:
        number:
          min: 0
          max: 86399
          mode: box
          step: 1
          unit_of_measurement: seconds
    illuminance_allow_night_execution:
      description: (Optional) Allow illuminance-based turn-ON during Night phase.
      default: false
      selector:
        boolean:
    illuminance_allow_away_execution:
      description: (Optional) Allow illuminance-based turn-ON during Away mode.
      default: false
      selector:
        boolean:
    zwave_node_id:
      name: Z-Wave Switch Node ID
      description: (Optional) Node ID of the Z-Wave switch used for button input. Only been tested with LZW30-SN devices.
      default:
      selector:
        number:
          min: 0
          max: 231
          mode: box
    media_entity:
      description: (Optional) Entity used for tracking playback state. Note- Only tested with Plex media players.
      default:
      selector:
        entity:
          domain: media_player
    media_script:
      name: (Optional) Hue Scene / Media Playback Script
      description: Script used to set Hue lights based on media playback state.
      default:
      selector:
        entity:
          domain: script
    phase_entity:
      description: Entity that holds current phase value.
      default:
      selector:
        entity:
          domain: input_select
    phase_allow_night_trigger:
      description: (Optional) Allow phase changing to night trigger.
      default: false
      selector:
        boolean:
    shifting_mode_entity:
      description: Entity that holds phase shifting mode value.
      default:
      selector:
        entity:
          domain: input_select
    mode_allow_away_trigger:
      description: (Optional) Allow shifting mode changing to away trigger.
      default: false
      selector:
        boolean:
    day_hue_scene:
      description: Default Hue scene for day time.
      default: Concentrate
      selector:
        text:
    day_hue_scene_playing:
      description: (Optional) Hue scene for episode playing in day time.
      default: TV Show Day
      selector:
        text:
    day_hue_scene_paused:
      description: (Optional) Hue scene for episode paused day time.
      default: Concentrate
      selector:
        text:
    day_hue_scene_movie_playing:
      description: (Optional) Hue scene for movie playing in day time.
      default: Movie
      selector:
        text:
    day_hue_scene_movie_paused:
      description: (Optional) Hue scene for movie paused in day time.
      default: Relax
      selector:
        text:
    night_hue_scene:
      description: (Optional) Default Hue scene for night time.
      default: Relax
      selector:
        text:
    night_hue_scene_playing:
      description: (Optional) Hue scene for episode playing in night time.
      default: TV Show Night
      selector:
        text:
    night_hue_scene_paused:
      description: (Optional) Hue scene for episode paused in night time.
      default: Relax
      selector:
        text:
    night_hue_scene_movie_playing:
      description: (Optional) Hue scene for movie playing in night time.
      default: Movie
      selector:
        text:
    night_hue_scene_movie_paused:
      description: (Optional) Hue scene for movie paused night time.
      default: Relax
      selector:
        text:
mode: restart
trigger:
  - platform: event
    id: Automation-Reloaded
    event_type: automation_reloaded
  - platform: numeric_state
    id: Illuminance-BelowThreshold
    entity_id: !input 'illuminance_entity'
    below: !input 'illuminance_lux_threshold'
  - platform: numeric_state
    id: Illuminance-AboveThreshold
    entity_id: !input 'illuminance_entity'
    above: !input 'illuminance_lux_threshold'
  - platform: event
    id: SwitchButton-Up
    event_type: zwave_js_value_notification
    event_data:
      property_key: '002'
      value: KeyPressed
      node_id: !input 'zwave_node_id'
  - platform: event
    id: SwitchButton-Down
    event_type: zwave_js_value_notification
    event_data:
      property_key: '001'
      value: KeyPressed
      node_id: !input 'zwave_node_id'
  - platform: state
    entity_id: !input 'media_entity'
    id: Media-State-Change
  - platform: state
    entity_id: !input 'phase_entity'
    id: Home-Phase-Change
    to:
      - Morning
      - Day
      - Evening
  - platform: state
    entity_id: !input 'phase_entity'
    id: Home-Phase-Change-Night
    to: Night
  - platform: state
    entity_id: !input 'shifting_mode_entity'
    id: Shifting-Mode-Change
    to:
      - Home
      - Manual
      - Vacation
  - platform: state
    entity_id: !input 'shifting_mode_entity'
    id: Shifting-Mode-Change-Away
    to: Away
variables:
  light_entity: !input 'light_entity'
  illuminance_entity: !input 'illuminance_entity'
  illuminance_lux_threshold: !input illuminance_lux_threshold
  illuminance_toggle_on_high: !input 'illuminance_toggle_on_high'
  illuminance_allow_night_execution: !input 'illuminance_allow_night_execution'
  illuminance_allow_away_execution: !input 'illuminance_allow_away_execution'
  media_entity: !input 'media_entity'
  phase_allow_night_trigger: !input 'phase_allow_night_trigger'
  mode_allow_away_trigger: !input 'mode_allow_away_trigger'
condition:
  # Allow various grouped triggers. Allows for conditionally allowing triggers.
  - condition: or
    conditions:
      # Allow illuminance triggers conditionally-- if not Night/Away or allow Night/Away execution
      - condition: and
        conditions:
          # Illuminance Triggers
          - condition: or
            conditions:
              - condition: trigger
                id: Illuminance-BelowThreshold
              - condition: trigger
                id: Illuminance-AboveThreshold
          # Must either allow night exec OR be NOT be Phase-Night
          - condition: or
            conditions:
              - condition: template
                value_template: "{{ illuminance_allow_night_execution }}"
              - condition: not
                conditions:
                  - condition: state
                    entity_id: !input 'phase_entity'
                    state: 'Night'
          # Must either allow away exec OR be NOT ShiftingMode-Away
          - condition: or
            conditions:
              - condition: template
                value_template: "{{ illuminance_allow_away_execution }}"
              - condition: not
                conditions:
                  - condition: state
                    entity_id: !input shifting_mode_entity
                    state: 'Away'
      # Allow switch triggers
      - condition: trigger
        id: SwitchButton-Down
      - condition: trigger
        id: SwitchButton-Up
      # Allow media triggers if lights are on
      - condition: and
        conditions:
          - condition: trigger
            id: Media-State-Change
          - condition: state
            entity_id: !input 'light_entity'
            state: 'on'
      # Allow phase change trigger for Morning, Day, Night
      - condition: trigger
        id: Home-Phase-Change
      # Allow phase change trigger for Night if allowed
      - condition: and
        conditions:
          - condition: trigger
            id: Home-Phase-Change-Night
          - condition: template
            value_template: "{{ phase_allow_night_trigger }}"
      # Allow shifting mode trigger for Home, Manual, Vacation
      - condition: trigger
        id: Shifting-Mode-Change
      # Allow shifting mode change for Away if allowed
      - condition: and
        conditions:
          - condition: trigger
            id: Shifting-Mode-Change-Away
          - condition: template
            value_template: "{{ mode_allow_away_trigger }}"
      # Allow automation updates if the lights are already on (catch all)
      - condition: state
        entity_id: !input 'light_entity'
        state: 'on'
action:
  # Turn off lights
  - choose:
      # Button off
      - conditions:
          - condition: trigger
            id: SwitchButton-Down
        sequence:
          - service: light.turn_off
            target:
              entity_id: !input 'light_entity' 
      # Illuminance off when illuminance_toggle_on_high is false
      # Could add optional night / away shifts to this condition as well - will allow delayed off on changes
      - conditions:
          - condition: trigger
            id: Illuminance-AboveThreshold
          - condition: template
            value_template: "{{ illuminance_toggle_on_high == false }}"
        # wait for delay, make sure condition is still met before taking action
        sequence:
          - delay:
              seconds: !input 'illuminance_off_delay_seconds'
          - condition: template
            value_template: "{{ (illuminance_entity != none) and (states(illuminance_entity)|int > illuminance_lux_threshold|int) }}"
          - service: light.turn_off
            target:
              entity_id: !input 'light_entity'
      # Illuminance off when illuminance_toggle_on_high is true
      # Could add optional night / away shifts to this condition as well - will allow delayed off on changes
      - conditions:
          - condition: trigger
            id: Illuminance-BelowThreshold
          - condition: template
            value_template: "{{ illuminance_toggle_on_high }}"
        # wait for delay, make sure condition is still met before taking action
        sequence:
          - delay:
              seconds: !input 'illuminance_off_delay_seconds'
          - condition: template
            value_template: "{{ (illuminance_entity != none) and (states(illuminance_entity)|int < illuminance_lux_threshold|int) }}"
          - service: light.turn_off
            target:
              entity_id: !input 'light_entity'
  # Turn on lights
    default:
      - condition: or
        conditions:
          # Button up
          - condition: trigger
            id: SwitchButton-Up
          # Illuminance on when illuminance_toggle_on_high is false
          - condition: and
            conditions:
              - condition: template
                value_template: "{{ (illuminance_entity != none) and (states(illuminance_entity)|int < illuminance_lux_threshold|int) }}"
              - condition: template
                value_template: "{{ illuminance_toggle_on_high == false }}"
          # Illuminance on when illuminance_toggle_on_high is true
          - condition: and
            conditions:
              - condition: template
                value_template: "{{ (illuminance_entity != none) and (states(illuminance_entity)|int > illuminance_lux_threshold|int) }}"
              - condition: template
                value_template: "{{ illuminance_toggle_on_high == true }}"
          # Lights are on and Media state or phase change
          - condition: and
            conditions:
              - condition: state
                entity_id: !input 'light_entity'
                state: 'on'
              - condition: or
                conditions:
                  - condition: trigger
                    id: Media-State-Change
                  - condition: trigger
                    id: Home-Phase-Change
                  - condition: trigger
                    id: Home-Phase-Change-Night
                  - condition: trigger
                    id: Shifting-Mode-Change
                  - condition: trigger
                    id: Shifting-Mode-Change-Away
# below is the code for turning lights on. All conditional logic for whether lights should adjust should be above this line.
# _how_ the lights adjust is below:
      # Night phase handling
      - choose:
          conditions:
            - condition: state
              entity_id: !input 'phase_entity'
              state:
                - Evening
                - Night
          sequence:
            # Media entity is defined
            - choose:
                conditions:
                  - condition: template
                    value_template: "{{ (media_entity != none) }}"
                sequence:
                  - service: !input 'media_script'
                    data:
                      light_entity: !input 'light_entity'
                      media_entity: !input 'media_entity'
                      hue_scene_default: !input 'night_hue_scene'
                      hue_scene_playing: !input 'night_hue_scene_playing'
                      hue_scene_paused: !input 'night_hue_scene_paused'
                      hue_scene_playing_movie: !input 'night_hue_scene_movie_playing'
                      hue_scene_paused_movie: !input 'night_hue_scene_movie_paused'
            # No media entity is defined
              default:
                - service: hue.hue_activate_scene
                  data:
                    group_name: "{{ state_attr(light_entity,'friendly_name') }}"
                    scene_name: !input 'night_hue_scene'
      # Normal morning/day
        default:
          # Media entity is defined
          - choose:
              conditions:
                - condition: template
                  value_template: "{{ (media_entity != none) }}"
              sequence:
                - service: !input 'media_script'
                  data:
                    light_entity: !input 'light_entity'
                    media_entity: !input 'media_entity'
                    hue_scene_default: !input 'day_hue_scene'
                    hue_scene_playing: !input 'day_hue_scene_playing'
                    hue_scene_paused: !input 'day_hue_scene_paused'
                    hue_scene_playing_movie: !input 'day_hue_scene_movie_playing'
                    hue_scene_paused_movie: !input 'day_hue_scene_movie_paused'
          # No media entity is defined
            default:
              - service: hue.hue_activate_scene
                data:
                  group_name: "{{ state_attr(light_entity,'friendly_name') }}"
                  scene_name: !input 'day_hue_scene'