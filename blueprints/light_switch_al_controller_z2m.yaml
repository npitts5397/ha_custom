blueprint:
  name: Light-Switch-AL Controller (Z2M)
  domain: automation
  author: Nathaniel Pitts
  description: |
    Set light configuration based on switch and Adaptive Lighting states. Designed for use with Inovelli Blue Series switches
    bound to smart bulb groups or directly controlling traditional lighting, but as long as the MQTT payload contains an `action`
    field with a supported value, this blueprint can be used. See below for supported values of `action`.

    Supported switch events:
      Enables AL:
        * `"action": "on"` - also turns on lights
        * `"action": "up_single"`
        * `"action": "config_double"`
      Disables AL:
        * `"action": "off"` - also turns off lights
        * `"action": "down_single"`
        * `"action": "up_double"` 
        * `"action": "down_double"`
        * `"action": "up_held"`
        * `"action": "down_held"`
      Other:
        * `"action": "config_single"` - toggles optional secondary light
    Prerequisites:
      * Zigbee2MQTT (Z2M)
      * Lights
          - Lights are best when added to platform-native groups. For example, if using Zigbee lights, a Zigbee group works best.
            Use Home Assistant groups only if necessary.
      * Switch
          - Dimmer mode: true
          - The Zigbee switch device is added to the same group as the lights.
          - Zigbee switch binding has only `LevelCtrl` binding to the light goup.
      * Adaptive Lighting
          - Configured for the light group
          - `take_over_control` is disabled
    
    Change log:
    #1.0.0 - HA-82 - Initial version.
    #1.1.0 - HA-82 - Add ability to handle multiple switches.
    #1.2.0 - HA-82 - `config_double` always enables AL. 'off', `up_double` and `down_double` disable AL.
    #2.0.0 - HA-82 - Breaking change. Subscribe to switch MQTT topics instead of relying on HA entity state changes.
    #2.0.1 - HA-89 - Set manual control state on the AL switch instead of lights.
    #2.1.0 - HA-90 - Additional input topics and support generic on/off payloads.
    #2.2.0 - HA-86 - Support toggling secondary light with `config_single` action.
    #2.3.0 - HA-92 - Support enable/disable of AL Sleep mode and support multiple secondary lights.

    Known issues:

    To do:
    * `config_double` toggles with animation. Needs AL entity(ies) though.
    * suppport additional actions- triple_*, quad_*, etc. for ceiling lights, curtains, etc.
    * determine how to handle switches that control multiple lights (e.g., lamps and ceiling)
  input:
    primary_lights:
      name: Primary Lights
      description: Required. The primary lights to control.
      selector:
        entity:
          domain: light
          multiple: true
    primary_al_switch:
      name: Primary Adaptive Lighting switch
      description: Required. The primary Adaptive Lighting switch for the primary lights selected above.
      selector:
        entity:
          domain: switch
          integration: adaptive_lighting
    secondary_light:
      name: Secondary Lights
      description: Optional. The secondary lights to toggle with `config_single` interations.
      default: []
      selector:
        entity:
          domain: light
          multiple: true
    switch_0_topic:
      name: Primary switch topic
      description: Optional. Device MQTT topic for primary switch.
      default: none
      selector:
        text:
    switch_1_topic:
      name: Secondary switch topic
      description: Optional. Device MQTT topic for secondeary switch.
      default: none
      selector:
        text:
    switch_2_topic:
      name: Tertiary switch topic
      description: Optional. Device MQTT topic for tertiary switch.
      default: none
      selector:
        text:
    switch_3_topic:
      name: Quaternary switch topic
      description: Optional. Device MQTT topic for quaternary switch.
      default: none
      selector:
        text:
    switch_4_topic:
      name: Quinary switch topic
      description: Optional. Device MQTT topic for quinary switch.
      default: none
      selector:
        text:
    switch_5_topic:
      name: Senary switch topic
      description: Optional. Device MQTT topic for senary switch.
      default: none
      selector:
        text:
    sleep_helper:
      name: Sleep Helper
      description: Optional. Helper that holds values related to sleep mode. Valid values are `Awake`, `Nap`, and `Sleep`.
      default: {}
      selector:
        entity:
          domain:
            - input_select
            - input_text
    primary_al_sleep_mode_switch:
      name: Primary Adaptive Lighting Sleep Mode switch
      description: Optional, but required when `sleep_helper` is set. The primary Adaptive Lighting Sleep Mode switch for the primary lights selected above.
      default: {}
      selector:
        entity:
          domain: switch
          integration: adaptive_lighting
mode: single
trigger:
  - platform: state
    entity_id: !input primary_lights
    to: "off"
    id: light_turned_off
  - id: switch_0_action
    platform: mqtt
    topic: !input switch_0_topic
    value_template: |
      {%- if (value_json['action'] is defined) -%}
        {%- if (value_json['action'] is not none) and (value_json['action'] | string != '') -%}
          {{ 'action' }}
        {%- endif -%}
      {%- endif -%}
    payload: action
  - id: switch_1_action
    platform: mqtt
    topic: !input switch_1_topic
    value_template: |
      {%- if (value_json['action'] is defined) -%}
        {%- if (value_json['action'] is not none) and (value_json['action'] | string != '') -%}
          {{ 'action' }}
        {%- endif -%}
      {%- endif -%}
    payload: action
  - id: switch_2_action
    platform: mqtt
    topic: !input switch_2_topic
    value_template: |
      {%- if (value_json['action'] is defined) -%}
        {%- if (value_json['action'] is not none) and (value_json['action'] | string != '') -%}
          {{ 'action' }}
        {%- endif -%}
      {%- endif -%}
    payload: action
  - id: switch_3_action
    platform: mqtt
    topic: !input switch_3_topic
    value_template: |
      {%- if (value_json['action'] is defined) -%}
        {%- if (value_json['action'] is not none) and (value_json['action'] | string != '') -%}
          {{ 'action' }}
        {%- endif -%}
      {%- endif -%}
    payload: action
  - id: switch_4_action
    platform: mqtt
    topic: !input switch_4_topic
    value_template: |
      {%- if (value_json['action'] is defined) -%}
        {%- if (value_json['action'] is not none) and (value_json['action'] | string != '') -%}
          {{ 'action' }}
        {%- endif -%}
      {%- endif -%}
    payload: action
  - id: switch_5_action
    platform: mqtt
    topic: !input switch_5_topic
    value_template: |
      {%- if (value_json['action'] is defined) -%}
        {%- if (value_json['action'] is not none) and (value_json['action'] | string != '') -%}
          {{ 'action' }}
        {%- endif -%}
      {%- endif -%}
    payload: action
  - id: sleep_helper_updated
    platform: state
    entity_id: !input sleep_helper 
variables:
  primary_lights: !input primary_lights
  primary_al_switch: !input primary_al_switch
  secondary_light: !input secondary_light
  event: >
    {%- set event = '' -%}
    {%- if trigger is defined -%}
      {%- if trigger.payload_json is defined -%}
        {%- if trigger.payload_json.action -%}
          {%- set event = trigger.payload_json.action -%}
        {%- endif -%}
      {%- endif -%}
    {%- endif -%}
    {{ event }}
  sleep_helper: !input sleep_helper
  primary_al_sleep_mode_switch: !input primary_al_sleep_mode_switch
condition: []
action:
  - choose:
      # primary lighting
      - conditions:
          - condition: template
            value_template: "{{ event == 'on' }}"
        sequence:
          - service: switch.turn_on
            target:
              entity_id: "{{ primary_al_switch }}"
          - service: light.turn_on
            target:
              entity_id:
                "{{ primary_lights }}"
      - conditions:
          - condition: template
            value_template: "{{ event == 'up_single' }}"
        sequence:
          - service: switch.turn_on
            target:
              entity_id: "{{ primary_al_switch }}"
          - service: adaptive_lighting.set_manual_control
            data:
              manual_control: false
              entity_id: "{{ primary_al_switch }}"
          - service: adaptive_lighting.apply
            data:
              entity_id: "{{ primary_al_switch }}"
              transition: 1
      - conditions:
          - condition: template
            value_template: >
              {{
                (event == 'down_double') or
                (event == 'down_held') or
                (event == 'up_double') or
                (event == 'up_held') 
              }}
        sequence:
          - service: adaptive_lighting.set_manual_control
            data:
              manual_control: true
              entity_id: "{{ primary_al_switch }}"
          - service: switch.turn_off
            target:
              entity_id: "{{ primary_al_switch }}"
      - conditions:
          - condition: template
            value_template: "{{ event == 'config_double' }}"
        sequence:
          - service: switch.turn_on
            target:
              entity_id: "{{ primary_al_switch }}"
          - service: adaptive_lighting.set_manual_control
            data:
              manual_control: false
              entity_id: "{{ primary_al_switch }}"
          - service: adaptive_lighting.apply
            data:
              entity_id: "{{ primary_al_switch }}"
              transition: 1
      - conditions:
          or:
            - condition: trigger
              id:
                - light_turned_off
            - condition: template
              value_template: "{{ event == 'down_single' }}"
        sequence:
          - service: switch.turn_off
            target:
              entity_id: "{{ primary_al_switch }}"
          - service: adaptive_lighting.set_manual_control
            data:
              manual_control: true
              entity_id: "{{ primary_al_switch }}"
      - conditions:
          - condition: template
            value_template: "{{ event == 'off' }}"
        sequence:
          - service: switch.turn_off
            target:
              entity_id: "{{ primary_al_switch }}"
          - service: light.turn_off
            target:
              entity_id:
                "{{ primary_lights }}"
      # secondary lighting
      - conditions:
          and:
            - condition: template
              value_template: "{{ event == 'config_single' }}"
            - condition: template
              value_template: |
                {%- if (secondary_light is defined) and (secondary_light | length > 0) -%}
                  {{ true }}
                {%- endif -%}
        sequence:
          - service: light.toggle
            target:
              entity_id:
                "{{ secondary_light }}"
      - conditions:
          - condition: trigger
            id: 
              - sleep_helper_updated
        sequence:
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ states(sleep_helper) == 'Nap' }}"
                sequence:
                  - service: switch.turn_on
                    target:
                      entity_id:
                        "{{ primary_al_sleep_mode_switch }}"
              - conditions:
                  - condition: template
                    value_template: "{{ states(sleep_helper) == 'Sleep' }}"
                sequence:
                  - service: switch.turn_on
                    target:
                      entity_id:
                        "{{ primary_al_sleep_mode_switch }}"
            default:
              - service: switch.turn_off
                target:
                  entity_id:
                    "{{ primary_al_sleep_mode_switch }}"
