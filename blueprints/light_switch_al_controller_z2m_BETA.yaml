blueprint:
  name: Light-Switch-AL Controller (MQTT) BETA
  domain: automation
  author: Nathaniel Pitts
  source_url: https://github.com/xenokira/ha_custom/blob/main/blueprints/light_switch_al_controller_z2m.yaml
  description: |
    Set light configuration based on switch and Adaptive Lighting states. Designed for use with Inovelli Blue Series switches
    bound to smart bulb groups or directly controlling traditional lighting.

    Supported switch events in switch's MQTT payload:
      * Enables AL:
        - `"action": "on"` - also turns on lights
        - `"action": "up_single"` - also turns on lights when direct control is enabled
      * Disables AL:
        - `"action": "off"` - also turns off lights
        - `"action": "down_single"` - also turns off lights when direct control is enabled
        - `"action": "up_double"` - also dims to 100% when direct control is enabled
        - `"action": "down_double"` - also dims to 35% when direct control is enabled
        - `"action": "up_held"` - also dims up by 5% when direct control is enabled
        - `"action": "down_held"` - also dims down by 5% when direct control is enabled
      * Other:
        - `"action": "config_single"` - toggles optional secondary light

    Prerequisites:
      * Lights
          - must be Adaptive Lighting enabled
          - best when bound/associated to switches, but not required. For example, if using Zigbee lights, a Zigbee group works best.
      * Switch (built for Inovelli Blue series)
          - Dimmer mode: true
          - The Zigbee switch device is added to the same group as the lights (not required when Primary Lights Direct Control is enabled).
          - If lights are bound to switch, Zigbee switch binding has only `LevelCtrl` binding to the light goup.
      * Adaptive Lighting
          - Configured for any specified lights
          - `take_over_control` is disabled
      * Inovelli Blue LED (Zigbee2MQTT) script (Optional)
          - Used to set notification for secondary lights
          - Blueprint is available here: https://github.com/zanix/home-assistant-blueprints/blob/main/script/inovelli_blue_led_zigbee2mqtt.yaml
          - After creating the script from the blueprint, set script's mode from 'single' to 'parallel'
    
    Change log:
      * 1.0.0 - HA-82 - Initial version.
      * 1.1.0 - HA-82 - Add ability to handle multiple switches.
      * 1.2.0 - HA-82 - `config_double` always enables AL. 'off', `up_double` and `down_double` disable AL.
      * 2.0.0 - HA-82 - Breaking change. Subscribe to switch MQTT topics instead of relying on HA entity state changes.
      * 2.0.1 - HA-89 - Set manual control state on the AL switch instead of lights.
      * 2.1.0 - HA-90 - Additional input topics and support generic on/off payloads.
      * 2.2.0 - HA-86 - Support toggling secondary light with `config_single` action.
      * 2.3.0 - HA-92 - Support enable/disable of AL Sleep mode and support multiple secondary lights.
      * 3.0.0 - HA-95 
          - General refactoring
          - Enable color mode conditionally on current phase
          - Enable sleep mode conditionally on current sleep mode
          - Specify additional lights (beyond primary lights) strictly for sleep mode
          - Automatically determine Adaptive Lighting related switches (based on light entity name)
          - Fix AL apply service calls
          - Remove `config_double` functionality to reset AL config as it's redundant with `up_single`
          - Add toggle for smart lights not bound do a switch (needs testing)
          - Make use of adaptive_lighting.change_switch_settings service
      * 3.0.1 - HA-104 - Fix primary lighting direct control scenarios
      * 3.0.2 - HA-105 - Do not statically set sleep lighting values
      * 3.0.3 - HA-113 - Fix adaptive lighting not actually disabling when `manual_control: true`
      * 3.0.4 - HA-113 - Enable/disable adaptiving lighting for secondary lights
      * 3.1.0 - HA-118 - Animate Inovelli LED bar for secondary lighting
      * 3.1.1 - HA-122 - Set automation mode to `restart` instead of `single`
      * 3.2.0 - HA-127 - Add toggle to always enable RGB for all sleep modes

    Known issues:
      * turning off a light results in the automation firing twice due to 'light_turned_off' trigger
        Possible solution: Could create a trigger with a template, similar to how the switch_topic_x triggers work. The
        template would need to evaulate the most recent runtime and block the execution. This approach (in theory) will
        prevent new traces from showing up.
      * unable to use adaptive_lighting.change_switch_settings service to turn on lights (https://github.com/basnijholt/adaptive-lighting/issues/951)

    To do:
      * make Adaptive Lighting optional by validating list of generated switch names. Do not use AL if switch does not exist.
      * build native support for illuminance sensor?
      * support additional actions- triple_*, quad_*, etc. for ceiling lights, curtains, etc.
      * specify transition times for default and various modes/phases
      * Allow user to define dimming steps (default: 5%) and min/max brightness (default: 35%/100%for double paddle interactions
      * allow 'up_held' and 'down_held' to continue to dim lights without multiple hold actions when direct control is enabled
      * Implement support for automatically re-enabling Adaptive Lighting via adaptive_lighting.autoreset_control_seconds
      * possibly remove manual control setting as the switch toggle overrides it anyway
  input:
    primary_lights:
      name: Primary lights
      description: Required. The primary lights to control. Lights must be Adaptive Lighting enabled.
      selector:
        entity:
          domain: light
          multiple: true
    primary_lights_direct_control:
      name: Primary lights HA control
      description: Set to `true` when Home Assistant should control the selected lights directly. This should be `false` when lights and switches are bound (Zigbee) or associated (ZWave) directly. Defaults to `false`.
      default: false
      selector:
        boolean:
    secondary_lights:
      name: Secondary lights
      description: Optional. The secondary lights to toggle with `config_single` interactions. Lights must be Adaptive Lighting enabled. HA control of secondary lights is assumed.
      default: []
      selector:
        entity:
          domain: light
          multiple: true
    switch_0_topic:
      name: Primary switch topic
      description: Optional. Device MQTT topic for primary switch.
      default: 'none'
      selector:
        text:
    switch_1_topic:
      name: Secondary switch topic
      description: Optional. Device MQTT topic for secondary switch.
      default: 'none'
      selector:
        text:
    switch_2_topic:
      name: Tertiary switch topic
      description: Optional. Device MQTT topic for tertiary switch.
      default: 'none'
      selector:
        text:
    switch_3_topic:
      name: Quaternary switch topic
      description: Optional. Device MQTT topic for quaternary switch.
      default: 'none'
      selector:
        text:
    switch_4_topic:
      name: Quinary switch topic
      description: Optional. Device MQTT topic for quinary switch.
      default: 'none'
      selector:
        text:
    switch_5_topic:
      name: Senary switch topic
      description: Optional. Device MQTT topic for senary switch.
      default: 'none'
      selector:
        text:
    phase_helper:
      name: Phase helper
      description: Optional. Helper that has current phase. Non-functional unless `color_phases` is set.
      default: {}
      selector:
        entity:
          domain: input_select
    color_phases:
      name: Primary lights Adaptive Lighting color phases
      description: Optional. Comma separated list of phases during which AL color mode is activated for primary lights. Non-functional unless `phase_helper` is set.
      default: ''
      selector:
        text:
    sleep_helper:
      name: Sleep helper
      description: Optional. Helper that holds values related to sleep mode. Valid helper values are `Awake`, `Nap`, and `Sleep` (case insensitive). Non-functional unless `sleep_modes` is set.
      default: {}
      selector:
        entity:
          domain: input_select
    sleep_modes:
      name: Sleep modes
      description: Optional. Comma separated list of modes during which AL sleep mode is activated. Non-functional unless `sleep_helper` is set.
      default: ''
      selector:
        text:
    sleep_mode_additional_lights:
      name: Additional sleep mode lights
      description: Optional. Lights in addition to primary lights for which sleep mode is activated. Secondary lights are not included by default. Lights must be Adaptive Lighting enabled.
      default: []
      selector:
        entity:
          domain: light
          multiple: true
    sleep_mode_rgb:
      name: Color sleep mode
      description: Optional. Apply AL color mode when sleep mode is activated. Sleep-related modes do not need to be specified in `color_phases` when this option is enabled. Defaults to `false`.
      default: false
      selector:
        boolean:
    inovelli_blue_led_script:
      name: Inovelli Blue LED (Zigbee2MQTT) script
      description: Optional. Script for setting notifications on Inovelli Blue Series LED bar.
      default: {}
      selector:
        entity:
          domain: script
          multiple: false
mode: restart
trigger:
  - id: switch_0_action
    platform: mqtt
    topic: !input switch_0_topic
    value_template: |
      {%- if (value_json['action'] is defined) -%}
        {%- if (value_json['action'] is not none) and (value_json['action'] | string != '') -%}
          {{ 'action' }}
        {%- endif -%}
      {%- endif -%}
    payload: action
  - id: switch_1_action
    platform: mqtt
    topic: !input switch_1_topic
    value_template: |
      {%- if (value_json['action'] is defined) -%}
        {%- if (value_json['action'] is not none) and (value_json['action'] | string != '') -%}
          {{ 'action' }}
        {%- endif -%}
      {%- endif -%}
    payload: action
  - id: switch_2_action
    platform: mqtt
    topic: !input switch_2_topic
    value_template: |
      {%- if (value_json['action'] is defined) -%}
        {%- if (value_json['action'] is not none) and (value_json['action'] | string != '') -%}
          {{ 'action' }}
        {%- endif -%}
      {%- endif -%}
    payload: action
  - id: switch_3_action
    platform: mqtt
    topic: !input switch_3_topic
    value_template: |
      {%- if (value_json['action'] is defined) -%}
        {%- if (value_json['action'] is not none) and (value_json['action'] | string != '') -%}
          {{ 'action' }}
        {%- endif -%}
      {%- endif -%}
    payload: action
  - id: switch_4_action
    platform: mqtt
    topic: !input switch_4_topic
    value_template: |
      {%- if (value_json['action'] is defined) -%}
        {%- if (value_json['action'] is not none) and (value_json['action'] | string != '') -%}
          {{ 'action' }}
        {%- endif -%}
      {%- endif -%}
    payload: action
  - id: switch_5_action
    platform: mqtt
    topic: !input switch_5_topic
    value_template: |
      {%- if (value_json['action'] is defined) -%}
        {%- if (value_json['action'] is not none) and (value_json['action'] | string != '') -%}
          {{ 'action' }}
        {%- endif -%}
      {%- endif -%}
    payload: action
  - platform: state
    entity_id: !input primary_lights
    to: "off"
    id: light_turned_off
  - id: phase_helper_updated
    platform: state
    entity_id: !input phase_helper
  - id: sleep_helper_updated
    platform: state
    entity_id: !input sleep_helper
variables:
  event: >
    {%- set event = '' -%}
    {%- if trigger is defined -%}
      {%- if trigger.payload_json is defined -%}
        {%- if trigger.payload_json.action -%}
          {%- set event = trigger.payload_json.action -%}
        {%- endif -%}
      {%- endif -%}
    {%- endif -%}
    {{ event }}
  switch_0_topic: !input switch_0_topic
  switch_1_topic: !input switch_1_topic
  switch_2_topic: !input switch_2_topic
  switch_3_topic: !input switch_3_topic
  switch_4_topic: !input switch_4_topic
  switch_5_topic: !input switch_5_topic
  switch_entities: >
    {%- set mqtt_topics = [switch_0_topic, switch_1_topic, switch_2_topic, switch_3_topic, switch_4_topic, switch_5_topic] %}
    {%- set data = namespace(topics=[],switches=[]) %}
    {%- for topic in mqtt_topics %}
      {%- if (topic != 'none') and (topic != '') %}
          {%- set data.topics = data.topics + [topic] %}
      {%- endif %}
    {%- endfor %}
    {%- for topic in data.topics %}
      {%- set data.switches = data.switches + ['light.' + topic.replace(topic.split('/')[0] + '/','').replace('-','').replace(' ','_') | lower] %}
    {%- endfor %}
    {{ data.switches }}
  primary_lights: !input primary_lights
  primary_lights_state: >
    {%- set primary_lights_state = 'off' %}
    {%- if primary_lights is defined and (primary_lights | length > 0) %}
      {%- set primary_lights_states = expand(primary_lights) | selectattr('state') | map(attribute='state') | join(',') %}
      {%- if 'on' in primary_lights_states %}
        {%- set primary_lights_state = 'on' %}
      {%- endif %}
    {%- endif %}
    {{ primary_lights_state }}
  primary_lights_direct_control: !input primary_lights_direct_control
  primary_lights_direct_control_enabled: >
    {%- set direct_control = false %}
    {%- if (primary_lights_direct_control == true) or (event == 'on') or (event == 'off') %}
      {%- set direct_control = true %}
    {%- endif %}
    {{ direct_control }}
  primary_lights_adaptive_lighting_switches: >
    {%- set data = namespace(switches=[]) %}
    {%- for light in primary_lights %}
      {%- set data.switches = data.switches + ['switch.adaptive_lighting_' + light.replace('light.','')] %}
    {%- endfor %}
    {{ data.switches }}
  secondary_lights: !input secondary_lights
  secondary_lights_state: >
    {%- set secondary_lights_state = 'off' %}
    {%- if secondary_lights is defined and (secondary_lights | length > 0) %}
      {%- set secondary_lights_states = expand(secondary_lights) | selectattr('state') | map(attribute='state') | join(',') %}
      {%- if 'on' in secondary_lights_states %}
        {%- set secondary_lights_state = 'on' %}
      {%- endif %}
    {%- endif %}
    {{ secondary_lights_state }}
  secondary_lights_adaptive_lighting_switches: >
    {%- set data = namespace(switches=[]) %}
    {%- for light in secondary_lights %}
      {%- set data.switches = data.switches + ['switch.adaptive_lighting_' + light.replace('light.','')] %}
    {%- endfor %}
    {{ data.switches }}
  secondary_lights_switch_led_color: Cyan
  secondary_lights_switch_led_effect: Open/Close
  secondary_lights_switch_led_duration: 1 Second
  secondary_lights_switch_led_level: 12
  phase_helper: !input phase_helper
  color_phases: !input color_phases
  current_phase: >
    {%- set current_phase = '' %}
    {%- if phase_helper is defined and (phase_helper | length > 0) %}
      {%- set current_phase = states(phase_helper) | lower %}
    {%- endif %}
    {{ current_phase }}
  sleep_helper: !input sleep_helper
  sleep_modes: !input sleep_modes
  sleep_mode_additional_lights: !input sleep_mode_additional_lights
  sleep_mode_switches: >
    {%- set data = namespace(switches=[]) %}
    {%- for light in (primary_lights + sleep_mode_additional_lights) %}
      {%- set data.switches = data.switches + ['switch.adaptive_lighting_sleep_mode_' + light.replace('light.','')] %}
    {%- endfor %}
    {{ data.switches }}
  current_sleep_mode: >
    {%- set current_mode = '' %}
    {%- if sleep_helper is defined and (sleep_helper | length > 0) %}
      {%- set current_mode = states(sleep_helper) | lower %}
    {%- endif %}
    {{ current_mode }}
  enable_sleep: >
    {%- set enable_sleep = false %}
    {%- if sleep_modes is defined and (sleep_modes | length > 0) %}
      {%- set sleep_modes = sleep_modes.split(",") | map('trim') | map('lower') | list %}
      {%- if current_sleep_mode in sleep_modes %}
        {%- set enable_sleep = true %}
      {%- endif %}
    {%- endif %}
    {{ enable_sleep }}
  enable_rgb_color: >
    {%- set enable_color = false %}
    {%- if color_phases is defined and (color_phases | length > 0) %}
      {%- set color_phases = color_phases.split(",") | map('trim') | map('lower') | list %}
      {%- if current_phase in color_phases %}
        {%- set enable_color = true %}
      {%- endif %}
    {%- endif %}
    {%- if sleep_helper is defined and (sleep_helper | length > 0) %}
      {%- if current_sleep_mode in sleep_modes %}
        {%- set enable_color = true %}
      {%- endif %}
    {%- endif %}
    {{ enable_color }}
  inovelli_blue_led_script: !input inovelli_blue_led_script
condition: []
action:
  - choose:
      # primary lights - mqtt "on" OR "up_single" OR (phase_helper_updated AND light is on)
      - conditions: "{{ event == 'on' or event == 'up_single' or (trigger.id == 'phase_helper_updated' and primary_lights_state == 'on') }}"
        sequence:
          - parallel:
              - service: adaptive_lighting.set_manual_control
                data:
                  manual_control: false
                  lights:
                    "{{ primary_lights }}"
              - service: switch.turn_on
                target:
                  entity_id:
                    "{{ primary_lights_adaptive_lighting_switches }}"
          - repeat:
              for_each: "{{ primary_lights_adaptive_lighting_switches }}"
              sequence:
                - service: adaptive_lighting.change_switch_settings
                  data:
                    use_defaults: configuration
                    entity_id: "{{ repeat.item }}"
                    prefer_rgb_color: "{{ enable_rgb_color }}"
          - if:
              - condition: template
                value_template: "{{ primary_lights_direct_control_enabled == true }}"
            then:
              - service: light.turn_on
                target:
                  entity_id:
                    "{{ primary_lights }}"
      # primary lights - (mqtt "off" OR "down_single") OR light turned off
      - conditions: "{{ event == 'off' or event == 'down_single' or trigger.id == 'light_turned_off' }}"
        sequence:
          - parallel:
              - service: adaptive_lighting.set_manual_control
                data:
                  manual_control: true
                  lights:
                    "{{ primary_lights }}"
              - service: switch.turn_off
                target:
                  entity_id:
                    "{{ primary_lights_adaptive_lighting_switches }}"
              - choose:
                  - conditions: "{{ (event == 'off' or primary_lights_direct_control_enabled == true) and primary_lights_state == 'on' }}"
                    sequence:
                      - service: light.turn_off
                        target:
                          entity_id:
                            "{{ primary_lights }}"
      # primary lights - mqtt "up_double" OR "up_held" OR "down_double" OR "down_held"
      - conditions: "{{ event == 'up_double' or event == 'up_held' or event == 'down_double' or event == 'down_held' }}"
        sequence:
          - parallel:
              - service: adaptive_lighting.set_manual_control
                data:
                  manual_control: true
                  lights:
                    "{{ primary_lights }}"
              - service: switch.turn_off
                target:
                  entity_id:
                    "{{ primary_lights_adaptive_lighting_switches }}"
          - if:
              - condition: template
                value_template: "{{ primary_lights_direct_control_enabled == true }}"
            then:
              - choose:
                  - conditions: "{{ event == 'up_double' }}"
                    sequence:
                      - service: light.turn_on
                        target:
                          entity_id:
                            "{{ primary_lights }}"
                        data:
                          brightness_pct: 100
                  - conditions: "{{ event == 'up_held' }}"
                    sequence:
                      - service: light.turn_on
                        target:
                          entity_id:
                            "{{ primary_lights }}"
                        data:
                          brightness_step_pct: 5             
                  - conditions: "{{ event == 'down_double' }}"
                    sequence:
                      - service: light.turn_on
                        target:
                          entity_id:
                            "{{ primary_lights }}"
                        data:
                          brightness_pct: 35
                  - conditions: "{{ event == 'down_held' }}"
                    sequence:
                      - service: light.turn_on
                        target:
                          entity_id:
                            "{{ primary_lights }}"
                        data:
                          brightness_step_pct: -5    
      # secondary lighting - mqtt "config_single"
      - conditions: "{{ event == 'config_single' and ((secondary_lights is defined) and (secondary_lights | length > 0)) }}"
        sequence:
          - parallel:
              - if: "{{ (inovelli_blue_led_script) is defined and (inovelli_blue_led_script | length > 0)}}"
                then:
                  - service: "{{ inovelli_blue_led_script }}"
                    data:
                      led: All
                      color: "{{ secondary_lights_switch_led_color }}"
                      level: "{{ secondary_lights_switch_led_level }}"
                      effect: "{{ secondary_lights_switch_led_effect }}"
                      duration: "{{ secondary_lights_switch_led_duration }}"
                      target:
                        entity_id:
                          "{{ switch_entities }}"
              - choose:
                  - conditions: "{{ secondary_lights_state == 'on' }}"
                    sequence:
                      - parallel:
                          - service: adaptive_lighting.set_manual_control
                            data:
                              manual_control: true
                              lights:
                                "{{ secondary_lights }}"
                          - service: switch.turn_off
                            target:
                              entity_id:
                                "{{ secondary_lights_adaptive_lighting_switches }}"
                      - service: light.turn_off
                        target:
                          entity_id:
                            "{{ secondary_lights }}"
                default:
                  - parallel:
                      - service: adaptive_lighting.set_manual_control
                        data:
                          manual_control: false
                          lights:
                            "{{ secondary_lights }}"
                      - service: switch.turn_on
                        target:
                          entity_id:
                            "{{ secondary_lights_adaptive_lighting_switches }}"
                  - service: adaptive_lighting.apply
                    data:
                      lights:
                        "{{ secondary_lights }}"
                      adapt_brightness: true
                      turn_on_lights: true
                      adapt_color: true
                      prefer_rgb_color: false
                      transition: '1'
      # sleep helper updated
      - conditions: "{{ trigger.id == 'sleep_helper_updated' }}"
        sequence:
          - choose:
              - conditions: "{{ enable_sleep == true }}"
                sequence:
                  - service: switch.turn_on
                    target:
                      entity_id:
                        "{{ sleep_mode_switches }}"
            default:
              - service: switch.turn_off
                target:
                  entity_id:
                    "{{ sleep_mode_switches }}"
