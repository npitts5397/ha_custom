# Rebuild
# Requirements:
#  * Adaptive lighting should be optional, but still a core feature.
#       When adaptive lighting switches are not specified, then triggers simply turn on / off and if HA controled, dim.
#  * input should allow the specification of a base topic
#  * input should allow the selection of MQTT devices to be used as switches.... WAIT
#  * NOT IN MQTT SECTION, but support selection of non-MQTT trigger devices? e.g., use non-zigbee devices/entities to trigger

blueprint:
  name: Smart Adaptive Lighting and Scene Activator (SALSA)
  domain: automation
  author: Nathaniel Pitts
  source_url: https://github.com/npitts5397/ha_custom/blob/main/blueprints/smart_adaptive_lighting_scene_activator.yaml
  homeassistant:
    min_version: 2024.8.0
  description: |
    Set light configuration based on switch and Adaptive Lighting states. Designed for use with Inovelli Blue Series switches
    bound to smart bulb groups or directly controlling traditional lighting.
    
    Version history:
      * 4.0.0.beta-1 - HA-140
          - General refactoring
          - Significantly reworked inputs
          - Clean up old comments
          - Clean up unnecessary code
      * 3.0.0 - HA-95 - General refactoring, bugfixes, and feature enhancements
      * 2.0.0 - HA-82 - Subscribe to switch MQTT topics instead of relying on HA entity state changes.
      * 1.0.0 - HA-82 - Initial version.
  input:
    primary_lights:
      name: Primary Light Selection
      icon: mdi:lamps
      description: Options related to selecting primary lights.
      collapsed: false
      input:
        primary_lights:
          name: Primary Lights
          description: Required. The primary lights to control.
          selector:
            entity:
              domain: light
              multiple: true
        primary_lights_ha_control:
          name: Primary Lights HA Control
          description: Optional. Set to `true` when Home Assistant should control the selected lights via `light_on` and `light_off` actions. This should be `false` when lights and switches are bound (Zigbee) or associated (ZWave) directly. Defaults to `false`.
          default: false
          selector:
            boolean:
        primary_lights_min_brightness:
          name: Primary Lights Minimum Brightness
          description: Optional. Set to minimum desired brightess level for primary lights when `mqtt_min_brightness_actions` is specified. Does not apply when `primary_lights_ha_control` is `false`. Defaults to 35%. 
          default: 35
          selector:
            number:
              min: 0
              max: 100
              step: 1
              unit_of_measurement: '%'
        primary_lights_max_brightness:
          name: Primary Lights Maximum Brightness
          description: Optional. Set to maximum desired brightess level for primary lights when `mqtt_max_brightness_actions` is specified. Does not apply when `primary_lights_ha_control` is `false`. Defaults to 100%.
          default: 100
          selector:
            number:
              min: 0
              max: 100
              step: 1
              unit_of_measurement: '%'
        primary_lights_dim_step_pct:
          name: Primary Lights Dim Step Percentage
          description: Optional. Set to the percentage to dim the primary lights when `mqtt_dim_up_actions` or `mqtt_dim_down_actions` is specified. Does not apply when `primary_lights_ha_control` is `false`. Defaults to 5%.
          default: 5
          selector:
            number:
              min: 1
              max: 100
              step: 1
              unit_of_measurement: '%'
    seconary_lights:
      name: Secondary Light Selection
      icon: mdi:lamps
      description: Options related to selecting secondary lights.
      collapsed: true
      input:
        secondary_lights:
          name: Secondary lights
          description: Optional. The secondary lights to toggle with interactions. HA control of secondary lights is assumed.
          default: [] 
          selector:
            target:
              entity:
                domain: light
    mqtt:
      name: MQTT Configuration
      icon: mdi:queue-first-in-last-out
      description: Subscribed MQTT topics and supported action values which trigger the automation.
      collapsed: true
      input:
        mqtt_topic_0:
          name: Topic 0
          description: Optional. MQTT topic to monitor for action messages. Typically, monitored topic is constructed as follows- `{base_topic}/{friendly device name}`, e.g., `zigbee2mqtt/Office switch`.
          default: 'none'
          selector:
            text:
        mqtt_topic_1:
          name: Topic 1
          description: Optional. MQTT topic to monitor for action messages. Typically, monitored topic is constructed as follows- `{base_topic}/{friendly device name}`, e.g., `zigbee2mqtt/Office switch`.
          default: 'none'
          selector:
            text:
        mqtt_topic_2:
          name: Topic 2
          description: Optional. MQTT topic to monitor for action messages. Typically, monitored topic is constructed as follows- `{base_topic}/{friendly device name}`, e.g., `zigbee2mqtt/Office switch`.
          default: 'none'
          selector:
            text:
        mqtt_topic_3:
          name: Topic 3
          description: Optional. MQTT topic to monitor for action messages. Typically, monitored topic is constructed as follows- `{base_topic}/{friendly device name}`, e.g., `zigbee2mqtt/Office switch`.
          default: 'none'
          selector:
            text:
        mqtt_topic_4:
          name: Topic 4
          description: Optional. MQTT topic to monitor for action messages. Typically, monitored topic is constructed as follows- `{base_topic}/{friendly device name}`, e.g., `zigbee2mqtt/Office switch`.
          default: 'none'
          selector:
            text:
        mqtt_on_actions:
          name: MQTT 'on' Actions
          description: |
            Optional. List of supported action values from MQTT topics for turning on lights. Each supported action should be on its own line.

            Default:

            ```
            up_single
            on
            ```
          default: |
            up_single
            on
          selector:
            text:
              multiline: true
        mqtt_off_actions:
          name: MQTT 'off' Actions
          description: |
            Optional. List of supported action values from MQTT topics for turning off lights. Each supported action should be on its own line.
            
            Default:

            ```
            down_single
            off
            ```
          default: |
            down_single
            off
          selector:
            text:
              multiline: true
        mqtt_dim_up_actions:
          name: MQTT 'dim up' Actions
          description: |
            Optional. List of supported action values from MQTT topics. Only used when `Primary Lights HA Control` is enabled. Each supported action should be on its own line.
            
            Default:

            ```
            up_hold
            ```
          default: |
            up_hold
          selector:
            text:
              multiline: true
        mqtt_dim_down_actions:
          name: MQTT 'dim down' Actions
          description: |
            Optional. List of supported action values from MQTT topics. Only used when `Primary Lights HA Control` is enabled. Each supported action should be on its own line.
            
            Default:

            ```
            down_hold
            ```
          default: |
            down_hold
          selector:
            text:
              multiline: true
        mqtt_min_brightness_actions:
          name: MQTT 'min brightness' Actions
          description: |
            Optional. List of supported action values from MQTT topics. Only used when `Primary Lights HA Control` is enabled. Each supported action should be on its own line.
            
            Default:

            ```
            down_double
            ```
          default: |
            down_double
          selector:
            text:
              multiline: true
        mqtt_max_brightness_actions:
          name: MQTT 'max brightness' Actions
          description: |
            Optional. List of supported action values from MQTT topics. Only used when `Primary Lights HA Control` is enabled. Each supported action should be on its own line.
            
            Default:

            ```
            up_double
            ```
          default: |
            up_double
          selector:
            text:
              multiline: true
        mqtt_secondary_on_actions:
          name: MQTT secondary 'on' Actions
          description: |
            Optional. List of supported action values from MQTT topics. Each supported action should be on its own line.
            
            Default:

            ```
            up_triple
            ```
          default: |
            up_triple
          selector:
            text:
              multiline: true
        mqtt_secondary_off_actions:
          name: MQTT secondary 'off' Actions
          description: |
            Optional. List of supported action values from MQTT topics. Each supported action should be on its own line.
            
            Default:

            ```
            down_triple
            ```
          default: |
            down_triple
          selector:
            text:
              multiline: true
    inovelli:
      name: Inovelli
      icon: mdi:lamps
      description: Optional. Specific 
      collapsed: true
      input:
        inovelli_blue_led_script:
          name: Inovelli Blue LED (Zigbee2MQTT) script
          description: Optional. Script for setting notifications on Inovelli Blue Series LED bar. Script available here- `https://github.com/zanix/home-assistant-blueprints`
          default: {}
          selector:
            entity:
              filter:
                domain: script
    adaptive_lighting:
      name: Adaptive Lighting Options
      icon: mdi:lamps
      description: Options related to Adaptive Lighting lighting integration.
      collapsed: true
      input:
        primary_adaptive_lighting_switches:
          name: Primary Adaptive Lighting Switches
          description: Optional. Adaptive Lighting switches for primary lights. Specifying switches here ensures Adaptive Lighting is reset appropriately. When choosing the primary Adaptive Lighting switch, not ones controlling brightness, color, or sleep.
          default: 
          selector:
            target:
              entity:
                domain: switch
                integration: adaptive_lighting
        secondary_adaptive_lighting_switches:
          name: Secondary Adaptive Lighting Switches
          description: Optional. Adaptive Lighting switches for secondary lights. Specifying switches here ensures Adaptive Lighting is reset appropriately. When choosing the secondary Adaptive Lighting switch, not ones controlling brightness, color, or sleep.
          default: 
          selector:
            target:
              entity:
                domain: switch
                integration: adaptive_lighting
        color_phases:
          name: Color Phases
          description: |
            Optional. List of phases during which Adaptive Lighting's color mode is activated. Non-functional unless `phase_helper` is set.

            Default:

            ```
            Morning
            Bedtime
            Night
            ```
          default: |
            Morning
            Bedtime
            Night
          selector:
            text:
              multiline: true
        sleep_modes:
          name: Sleep Modes
          description: |
            Optional. List of modes during which Adaptive Lighting's sleep mode is activated. Non-functional unless `sleep_helper` is set.
            Default:

            ```
            Sleep
            ```
          default: |
            Sleep
          selector:
            text:
              multiline: true
    home_assistant:
      name: Home Assistant Configuration
      description: Optionals related to Home Assistant configuration.
      collapsed: true
      input:
        scene_helper:
          name: Scene Helper
          description: Optional. Helper that holds a scene to set. When helper has no value, lights behave normally, but when helper has a value, that scene is applied instead. Scene helper updates apply immediately if light is on.
          default: {}
          selector:
            entity:
              filter:
                domain: input_text
        mode_helper:
          name: Mode Helper
          description: Optional. Helper whose value has the current mode. Non-functional unless `sleep_modes` is set.
          default: {}
          selector:
            entity:
              filter:
                domain: input_select
        phase_helper:
          name: Phase Helper
          description: Optional. Helper whose value has the current phase. Non-functional unless `color_phases` is set.
          default: {}
          selector:
            entity:
              filter:
                domain: input_select
mode: restart
triggers:
  - alias: mqtt_trigger_0 action
    id: mqtt_trigger_0
    trigger: mqtt
    topic: !input mqtt_topic_0
    payload: action
    value_template: |
      {%- set action = value_json.get('action') -%}
      {%- if action is not none and ((action | string) != '') -%}
        {{ 'action' }}
      {%- endif -%}
  - alias: mqtt_trigger_1 action
    id: mqtt_trigger_1
    trigger: mqtt
    topic: !input mqtt_topic_1
    payload: action
    value_template: |
      {%- set action = value_json.get('action') -%}
      {%- if action is not none and ((action | string) != '') -%}
        {{ 'action' }}
      {%- endif -%}
  - alias: mqtt_trigger_2 action
    id: mqtt_trigger_2
    trigger: mqtt
    topic: !input mqtt_topic_2
    payload: action
    value_template: |
      {%- set action = value_json.get('action') -%}
      {%- if action is not none and action | string != '' -%}
        {{ 'action' }}
      {%- endif -%}
  - alias: mqtt_trigger_3 action
    id: mqtt_trigger_3
    trigger: mqtt
    topic: !input mqtt_topic_3
    payload: action
    value_template: |
      {%- set action = value_json.get('action') -%}
      {%- if action is not none and action | string != '' -%}
        {{ 'action' }}
      {%- endif -%}
  - alias: mqtt_trigger_4 action
    id: mqtt_trigger_4
    trigger: mqtt
    topic: !input mqtt_topic_4
    payload: action
    value_template: |
      {%- set action = value_json.get('action') -%}
      {%- if action is not none and action | string != '' -%}
        {{ 'action' }}
      {%- endif -%}
  - alias: scene_helper updated
    id: scene_helper_updated
    trigger: state
    entity_id: !input scene_helper
  - alias: mode_helper updated
    id: mode_helper_updated
    trigger: state
    entity_id: !input mode_helper
  - alias: phase_helper updated
    id: phase_helper_updated
    trigger: state
    entity_id: !input phase_helper
variables:
  primary_lights: !input primary_lights
  action: >
    {%- set action = '' -%}
    {%- if trigger is defined and trigger.payload_json is defined -%}
      {%- set action = trigger.payload_json.get('action') -%}
    {%- endif -%}
    {{ action }}
  mqtt_on_actions: !input mqtt_on_actions
  mqtt_on_actions_list: "{{ mqtt_on_actions.strip().split('\n') }}"
  scene_helper: !input scene_helper
  scene_helper_value: >
    {%- set scene = None -%}
    {%- if scene_helper is defined and (scene_helper | length > 0) %}
      {%- if states(scene_helper).startswith('scene.') and (states(scene_helper) in (states.scene | map(attribute='entity_id') | list)) %}
        {%- set scene = states(scene_helper) | lower -%}
      {%- endif -%}
    {%- endif -%}
    {{ scene }}
conditions: []
actions:
  - alias: "Debug: Log MQTT Payload"
    action: logbook.log
    data:
      name: "MQTT Payload"
      message: "{{ trigger.payload_json }}"
  - alias: "turn on lights"
    choose:
    - conditions:
        - alias: action is in mqtt_on_actions
          condition: template
          value_template: "{{ action in mqtt_on_actions_list }}" #or ((primary_lights_state == 'on') and (trigger.id in ['phase_helper_updated','scene_helper_updated'])) }}
      sequence:
        - choose:
            - alias: scene_helper is specified
              conditions:
                - condition: template
                  value_template: "{{ scene_helper_value is not none }}"
              sequence:
                - action: adaptive_lighting.set_manual_control
                - action: light.turn_on
                  target:
                    entity_id:
                      "{{ primary_lights }}"
                - wait_template: >
                    {% set lights_on = primary_lights | map('states') | select('equalto', 'on') | list %}
                    {{ lights_on | length == primary_lights | length }}
                  timeout: '00:00:10'
                - delay:
                    milliseconds: 500
                - action: scene.turn_on
                  target:
                    entity_id: "{{ scene_helper_value }}"
                  data:
                    transition: 2
  #   - conditions:
  #       condition
  #     sequence:
  #       action
  #   default:
  #       action
