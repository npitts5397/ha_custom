blueprint:
  name: Light Controller (zigbee2mqtt)
  description: Sets a light state based on values in MQTT payload when triggered by a supported event.
  domain: automation
  input:
    light_entity:
      name: Light
      description: Light entity for which scenes will be set.
      selector:
        entity:
          domain: light
    subscribed_mqtt_topic:
      name: Subscribed MQTT Topic
      description: >
        Subscribed MQTT topic to which light state payloads are published. Payloads support several attributes:
          * `state` | string | Required. The state of the light. Supported values are `on` and `off`. Automation takes no action without this attribute.
          * `scene` | string | Optional. Name of a Home Assistant scene to set.
          * `transition` | number | Optional. Seconds to transition between light states / scenes. `0.1` increments are supported.
          * `brightness` | int | Optional. Brightness of the light. Valid values are 1-255.
          * `publish_mqtt_payload` | string | Optional. JSON string containing a payload that will be sent to 'Passthrough MQTT Topic'.
      selector:
        text:
    scene_helper:
      name: Scene Helper
      description: Optional. Home Assistant helper which holds a scene name. When helper value is not empty, the scene will be set when payload contains no scene.
      default: input_text.light_scene_helper_default
      selector:
        entity:
          domain: input_text
    default_on_transition:
      name: Default Scene Transition
      description: Amount of time in seconds to transition between scenes. Default is `0.5`. Can be overridden by payload values.
      default: 0.5
      selector:
        number:
          min: 0
          mode: box
          step: 0.1
          unit_of_measurement: seconds
    default_off_transition:
      name: Default 'Off' Transition
      description: Amount of time in seconds for light to transition to 'off' state. Default is `0.5`. Can be overridden by payload values.
      default: 0.5
      selector:
        number:
          min: 0
          mode: box
          step: 0.1
          unit_of_measurement: seconds
    publish_mqtt_topic:
      name: Publish MQTT Topic
      description: Optional. MQTT topic to which payloads are published. Typically a `/set` subtopic. Default is empty string.
      default: ''
      selector:
        text:
    default_on_publish_mqtt_payload:
      name: Default 'On' Publish MQTT Payload
      description: Default payload published to 'Publish MQTT Topic' for when light state is on. No payload is published when 'Passthrough MQTT Topic' is undefined. Default value sets an Inovelli Blue Series LED bar to green.
      default: '{ "led_effect": {"led": -1, "effect": "solid", "color": 85, "level": 10, "duration": 255 }}'
      selector:
        text:
    default_off_publish_mqtt_payload:
      name: Default 'Off' Publish MQTT Payload
      description: Default payload published to 'Publish MQTT Topic' for when light state is off. No payload is published when 'Passthrough MQTT Topic' is undefined. Default value sets an Inovelli Blue Series LED bar to blue.
      default: '{ "led_effect": {"led": -1, "effect": "solid", "color": 170, "level": 10, "duration": 255 }}'
      selector:
        text:
mode: restart
trigger:
- platform: event
  id: Automation-Reloaded
  event_type: automation_reloaded
- platform: state
  entity_id: !input scene_helper
  id: trigger_scene_helper
- platform: mqtt
  topic: !input subscribed_mqtt_topic
  id: trigger_mqtt
- platform: state
  entity_id: !input light_entity
  from: 'off'
  to: 'on'
  id: trigger_light_becomes_on
- platform: state
  entity_id: !input light_entity
  from: 'on'
  to: 'off'
  id: trigger_light_becomes_off
variables:
  light_entity: !input light_entity
  light_entity_state: '{{ states(light_entity) }}'
  scene_helper: !input scene_helper
  scene_helper_state: '{{ states(scene_helper) }}'
  default_on_transition: !input default_on_transition
  default_off_transition: !input default_off_transition
  publish_mqtt_topic: !input publish_mqtt_topic
  default_on_publish_mqtt_payload: !input default_on_publish_mqtt_payload
  default_off_publish_mqtt_payload: !input default_off_publish_mqtt_payload
# Set variables from MQTT payload if provided, otherwise use defaults
  desired_state: >
    {%- set state = '' -%}
    {%- if trigger is defined -%}
      {%- if trigger.payload_json is defined -%}
        {%- if trigger.payload_json.state -%}
          {%- set state = trigger.payload_json.state -%}
        {%- endif -%}
      {%- elif trigger.payload is defined -%}
        {%- if (trigger.payload == 'on') or (trigger.payload == 'off') -%}
          {%- set state = trigger.payload -%}
        {%- endif -%}
      {%- endif -%}
    {%- endif -%}
    {%- if state == '' -%}
      {% set state = light_entity_state -%}
    {%- endif -%}
    {{ state }}
  scene: >
    {%- set scene = '' -%}
    {%- if trigger is defined -%}
      {%- if trigger.payload_json is defined -%}
        {%- if trigger.payload_json.scene is defined -%}
          {%- set scene = trigger.payload_json.scene -%}
        {%- endif -%}
      {%- endif -%}
    {%- endif -%}
    {%- if scene == '' -%}
      {%- set scene = scene_helper_state -%}
    {%- endif -%}
    {{ (light_entity | replace('light.','scene.')) + '_' + (scene | lower  | replace(' ','_')) }}
  transition: >
    {%- set transition = '' -%}
    {%- if trigger is defined -%}
      {%- if trigger.payload_json is defined -%}
        {%- if trigger.payload_json.transition is defined -%}
          {%- set transition = trigger.payload_json.transition -%}
        {%- endif -%}
      {%- endif -%}
    {%- endif -%}
    {%- if transition == '' -%}
      {%- if desired_state == 'off' -%}
        {%- set transition = default_off_transition -%}
      {%- else -%}
        {%- set transition = default_on_transition -%}
      {%- endif -%}
    {%- endif -%}
    {{ transition }}
  brightness: >
    {%- set brightness = '' -%}
    {%- if trigger is defined -%}
      {%- if trigger.payload_json is defined -%}
        {%- if trigger.payload_json.brightness is defined -%}
          {%- set brightness = trigger.payload_json.brightness -%}
        {%- endif -%}
      {%- endif -%}
    {%- endif -%}
    {{ brightness }}
  publish_mqtt_payload: >
    {%- set payload = '' -%}
    {%- if trigger is defined -%}
      {%- if trigger.payload_json is defined -%}
        {%- if trigger.payload_json.publish_mqtt_payload is defined -%}
          {%- set payload = trigger.payload_json.publish_mqtt_payload -%}
        {%- endif -%}
      {%- endif -%}
    {%- endif -%}
    {%- if payload == '' -%}
      {%- if desired_state == 'on' -%}
        {%- set payload = default_on_publish_mqtt_payload -%}
      {%- elif desired_state == 'off' -%}
        {%- set payload = default_off_publish_mqtt_payload -%}
      {%- endif-%}
    {%- endif -%}
    {{ payload }}
condition:
# block execution if trigger_light_becomes_on happens within 1 second of the previous automation execution
- condition: not
  conditions:
  - condition: and
    conditions:
    - condition: template
      value_template: "{{ now() - state_attr(this.entity_id,'last_triggered') < timedelta(seconds=1) }}"
    - condition: or
      conditions:
      - condition: trigger
        id: trigger_light_becomes_on
      - condition: trigger
        id: trigger_light_becomes_off
action:
- parallel:
  - choose:
    - conditions:
      - condition: or
        conditions:
        - condition: and
          conditions:
          - condition: trigger
            id: trigger_mqtt
          - condition: template
            value_template: "{{ desired_state == 'on' }}"
        - condition: trigger
          id: trigger_scene_helper
        - condition: trigger
          id: trigger_light_becomes_on
      sequence:
      - choose:
        # light is off and triggered to turn on OR is already on
        - conditions:
          - condition: or
            conditions:
            - condition: and
              conditions:
              - condition: template
                value_template: "{{ states(light_entity) == 'off' }}"
              - condition: trigger
                id: trigger_mqtt
              - condition: template
                value_template: "{{ desired_state == 'on' }}"
            - condition: template
              value_template: "{{ states(light_entity) == 'on' }}"
          sequence:
          - choose:
            # if scene is provided, call 'scene.turn_on' for the scene
            # - conditions:
            #   - condition: and
            #     conditions: 
            #     - condition: template
            #       value_template: "{{ scene != '' }}"
            #   sequence:
            #   - service: scene.turn_on
            #     entities:
            #       entity_id: "{{ scene }}"
            #     data:
            #       transition: "{{ transition }}"
            # if brightness is provided, call 'light.turn_on' with brightness
            # - conditions:
            #   - condition: template
            #     value_template: "{{ brightness != '' }}"
            #   sequence:
            #   - service: light.turn_on
            #     target:
            #       entity_id: "{{ light_entity }}"
            #     data:
            #       transition: "{{ transition }}"
            #       brightness: "{{ brightness }}"
            # default 'light.turn_on' call
            default:
            - service: light.turn_on
              target:
                entity_id: "{{ light_entity }}"
              data:
                transition: "{{ transition }}"
        default: []
    # turn light off
    - conditions:
      - condition: or
        conditions:
        - condition: and
          conditions:
          - condition: trigger
            id: trigger_mqtt
          - condition: template
            value_template: "{{ desired_state == 'off' }}"
        - condition: trigger
          id: trigger_light_becomes_off
      sequence:
      - parallel:
        - service: light.turn_off
          target:
            entity_id: "{{ light_entity }}"
          data:
            transition: "{{ transition }}"
  # publish payload if publish topic is set
  - sequence:
    - condition: template
      value_template: "{{ (publish_mqtt_topic != '') and (publish_mqtt_topic != None) }}"
    - delay:
        seconds: "{{ transition }}"
    - service: mqtt.publish
      data:
        qos: "1"
        topic: "{{ publish_mqtt_topic }}"
        payload: "{{ publish_mqtt_payload }}"
