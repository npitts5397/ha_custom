blueprint:
  name: Illuminance Monitor
  description: Publishes an MQTT message when illuminance (lux) becomes above or below set lux threshold.
  domain: automation
  input:
    lux_sensor:
      name: Illuminance Sensor
      description: The illuminance (lux) sensor.
      selector:
        entity:
          domain: sensor
    light_mqtt_topic:
      name: Light MQTT Topic
      description: The MQTT topic to which light commands are published.
      selector:
        text:
    on_above_lux_threshold:
      name: On Above Lux Threshold
      description: When enabled, publish 'on' when lux becomes _above_ lux threshold. When disabled (default), publish 'on' when lux becomes _below_ lux threshold.
      default: false
      selector:
        boolean:
    lux_threshold:
      name: Lux Threshold
      description: The lux value used to trigger the automation.
      default: 100
      selector:
        number: 
          min: 0
          max: 100000
          mode: box
          step: 1
          unit_of_measurement: lux
    on_delay_seconds:
      name: On Delay
      description: The amount of time to wait before publishing 'on'. Cancels if lux re-crosses threshold.
      default: 0
      selector:
        number:
          min: 0
          mode: box
          step: 1
          unit_of_measurement: seconds
    off_delay_seconds:
      name: Off Delay
      description: The amount of time to wait before publishing 'off'. Cancels if lux re-crosses threshold.
      default: 0
      selector:
        number:
          min: 0
          mode: box
          step: 1
          unit_of_measurement: seconds
    random_offset_percentage:
      name: Random Offset Percentage
      description: The percentage above and below the specified delays to randomly wait before taking action.
      default: 0
      selector:
        number:
          min: 0
          max: 100
          step: 1
          unit_of_measurement: '%'
    do_not_publish_phases:
      name: Do-Not-Publish Phases
      description: The comma separated phases in which not to publish 'on' or 'off' messages to the MQTT topic.
      default: ""
      selector:
        text:
    phase_helper:
      name: Phase Helper
      description: The helper which holds current phase. This helper's state will be compared when do_not_publish_phases is set.
      default: {}
      selector:
        entity:
          domain: input_select
    do_not_publish_modes:
      name: Do-Not-Publish Modes
      description: The comma separated modes in which not to publush 'on' or 'off' messages to the MQTT topic.
      default: ""
      selector:
        text:
    mode_helper:
      name: Mode Entity
      description: The helper which hold current mode. This helper's state will be compared when do_not_publish_modes is set.
      default: {}
      selector:
        entity:
          domain: input_select
mode: restart
trigger:
- platform: event
  id: Automation-Reloaded
  event_type: automation_reloaded
- platform: numeric_state
  entity_id: !input lux_sensor
  above: !input lux_threshold
- platform: numeric_state
  entity_id: !input lux_sensor
  below: !input lux_threshold
- platform: state
  entity_id: !input phase_helper
- platform: state
  entity_id: !input mode_helper
variables:
  on_above_lux_threshold: !input on_above_lux_threshold
  do_not_publish_phases: !input do_not_publish_phases
  do_not_publish_phase_list: "{{ (do_not_publish_phases | replace(', ',',') | replace(' ,',',')).split(',') }}"
  phase_helper: !input phase_helper
  do_not_publish_modes: !input do_not_publish_modes
  do_not_publish_mode_list: "{{ (do_not_publish_modes | replace(', ',',') | replace(' ,',',')).split(',') }}"
  mode_helper: !input mode_helper
  on_message: 'on'
  off_message: 'off'
  random_offset_percentage_input: !input random_offset_percentage
  random_offset_percentage: "{{ random_offset_percentage_input | default(0,true) }}"
  on_delay_seconds_input: !input on_delay_seconds
  on_delay_seconds: "{{ on_delay_seconds_input | default(0,true) }}"
  on_wait_seconds: >-
    {%- if (on_delay_seconds != 0) and (random_offset_percentage > 0) %}
      {%- set on_low_end = (on_delay_seconds * random_offset_percentage/100)|int %}
      {%- set on_high_end = (on_delay_seconds * (1 + random_offset_percentage/100))|int %}
      {{ range(on_low_end, on_high_end) | random }}
    {%- else %}
      {{ on_delay_seconds }}
    {%- endif %}
  off_delay_seconds_input: !input off_delay_seconds
  off_delay_seconds: "{{ off_delay_seconds_input | default(0,true) }}"
  off_wait_seconds: >-
    {%- if (off_delay_seconds != 0) and (random_offset_percentage > 0) %}
      {%- set off_low_end = (off_delay_seconds * random_offset_percentage/100)|int %}
      {%- set off_high_end = (off_delay_seconds * (1 + random_offset_percentage/100))|int %}
      {{ range(off_low_end, off_high_end) | random }}
    {%- else %}
      {{ off_delay_seconds }}
    {%- endif %}
condition:
- condition: and
  # phase_helper is not set OR make sure current phase is not in do_not_publish_phase_list
  conditions:
  - condition: or
    conditions:
    - condition: template
      value_template: "{{ phase_helper == none }}"
    - condition: not
      conditions:
      - condition: template
        value_template: "{{ states(phase_helper) in do_not_publish_phase_list }}"
  # mode_helper is not set OR make sure current mode is not in do_not_publish_mode_list
  - condition: or
    conditions:
    - condition: template
      value_template: "{{ mode_helper == none }}"
    - condition: not
      conditions:
      - condition: template
        value_template: "{{ states(mode_helper) in do_not_publish_mode_list }}"
action:
- choose:
  # publish 'on'
  - conditions:
    - condition: or
      conditions:
      - condition: numeric_state
        entity_id: !input lux_sensor
        below: !input lux_threshold
      - condition: and
        conditions:
        - condition: template
          value_template: "{{ on_above_lux_threshold == true }}"
        - condition: numeric_state
          entity_id: !input lux_sensor
          above: !input lux_threshold
    sequence:
    - delay:
        seconds: "{{ on_wait_seconds }}"
    - service: mqtt.publish
      data:
        qos: "1"
        topic: !input light_mqtt_topic
        payload: "{{ on_message }}"
  # publish 'off'
  - conditions:
    - condition: or
      conditions:
      - condition: numeric_state
        entity_id: !input lux_sensor
        above: !input lux_threshold
      - condition: and
        conditions:
        - condition: template
          value_template: "{{ on_above_lux_threshold == true }}"
        - condition: numeric_state
          entity_id: !input lux_sensor
          below: !input lux_threshold
    sequence:
    - delay:
        seconds: "{{ off_wait_seconds }}"
    - service: mqtt.publish
      data:
        qos: "1"
        topic: !input light_mqtt_topic
        payload: "{{ off_message }}"
        